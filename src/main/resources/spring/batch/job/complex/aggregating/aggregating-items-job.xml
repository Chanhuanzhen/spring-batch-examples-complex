<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2011 Michael R. Lange <michael.r.lange@langmi.de>.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

    <description>
        Job in which the Itemwriter aggregates items.
        Works with a wrapper reader which peeks ahead to know if the delegate reader
        is exhausted.
        
        for http://stackoverflow.com/questions/8837487/how-to-process-logically-related-rows-after-itemreader-in-springbatch
    </description>
    <!-- 
        inline xmlns, otherwise it would look like 
        'batch:job, batch:step, etc.' 
    -->
    <job id="aggregateItemsJob" xmlns="http://www.springframework.org/schema/batch" restartable="true">
        <step id="aggregatedItemsStep">
            <tasklet>
                <chunk 
                    reader="readerExhaustedWrapper"
                    writer="aggregatedItemsWriter" 
                    commit-interval="5">
                </chunk>
            </tasklet>
<!--        because reader/writer are injected directly into the step
            there detected automatically as listeners
            
            see http://static.springsource.org/spring-batch/reference/html/configureStep.html#interceptingStepExecution
            "An ItemReader, ItemWriter or ItemProcessor that itself implements 
            one of the StepListener interfaces will be registered automatically 
            with the Step if using the namespace <step> element, or one of the 
            the *StepFactoryBean factories. This only applies to components 
            directly injected into the Step: if the listener is nested inside 
            another component, it needs to be explicitly registered 
            (as described above)."
            - as of Release 2.1.8
            
            <listeners>
                <listener ref="readerExhaustedWrapper" />
                <listener ref="itemProcessor" />                
            </listeners>-->
        </step>
    </job>

    <bean id="readerExhaustedWrapper" class="de.langmi.spring.batch.examples.complex.aggregating.ReaderExhaustedWrapper">
        <property name="delegate" ref="itemReader" />
    </bean>

    <bean id="itemReader" class="org.springframework.batch.item.support.IteratorItemReader">
        <constructor-arg>
            <ref bean="testData" />
        </constructor-arg>
    </bean>

    <bean id="testData" class="de.langmi.spring.batch.examples.complex.aggregating.AggregatingTestDataSimpleItemsFactoryBean" />

    <bean id="aggregatedItemsWriter" class="de.langmi.spring.batch.examples.complex.aggregating.AggregatingItemsWriter">
        <property name="delegate" ref="itemWriter" />
    </bean>      

    <bean id="itemWriter" class="de.langmi.spring.batch.examples.complex.support.SimpleItemWriter" />

</beans>
